"use strict";
const uiCommon = function(i) {
    i.init = () => {
        t.init(),
        0 < $(".tab-wrap").length && i.tab.init(),
        0 < $("#header").length && i.gnb.init(),
        0 < $(".accordion").length && i.accordion.init(),
        0 < $(".location-wrap").length && i.locationAccorion.init(),
        0 < $(".btn-fixed").length && i.btnFix.init(),
        0 < $(".footer-top").length && i.topScroll.init(),
        0 < $(".family-site").length && i.familySite.init(),
        0 < $(".view-wrap .contents-box").length && i.editorAttribute.init()
    }
    ;
    const t = {
        init() {
            0 < $(".input-wrap").length && this.inputActive(),
            0 < $("select").length && $("select").niceSelect(),
            0 < $(".select-box").length && this.selectChange()
        },
        inputActive() {
            const t = $(".input-default")
              , e = $(".ico-delete");
            setTimeout( () => {
                t.on("change keyup", function() {
                    var t = $(this).val()
                      , e = $(this).siblings(".ico-delete")
                      , i = $(this).parent(".input-wrap");
                    "" !== t ? (e.show(),
                    i.addClass("on")) : (e.hide(),
                    i.removeClass("on"))
                })
            }
            , 100),
            e.on("click", function() {
                $(this).hide(),
                $(this).siblings(t).val(""),
                $(this).parent(".input-wrap").removeClass("on")
            })
        },
        selectChange() {
            var t = $(".nice-select.select-wrap");
            $(".email-select").on("change", function() {
                var t = $(".email-select").val();
                "" !== t ? ($(".email-domain").val(t),
                $(".email-domain").parent(".input-wrap").addClass("on")) : ($(".email-domain").val("").focus(),
                $(".email-domain").parent(".input-wrap").removeClass("on"))
            }),
            t.on("change", function() {
                "" !== $(this).val() ? $(this).parent(".select-box").addClass("on") : $(this).parent(".select-box").removeClass("on")
            })
        }
    };
    i.editorAttribute = {
        init() {
            this.fontTagStyle(),
            this.propagateColorStyle()
        },
        fontTagStyle() {
            $("font[color]").each(function() {
                var t = $(this).attr("color");
                $(this).find("b, span, p").each(function() {
                    $(this).css("color", t)
                })
            })
        },
        propagateColorStyle() {
            $('[style*="color:"]').each(function() {
                var t, e = $(this).attr("style"), e = /color:\s*([^;]*)/i.exec(e);
                e && e[1] && (t = e[1].trim(),
                $(this).find("*").not('[style*="color:"]').each(function() {
                    $(this).css("color", t)
                }))
            })
        }
    },
    i.tab = {
        init() {
            $(".tab-wrap") && this.tabEvent(),
            this.tabActiveFocus()
        },
        tabEvent() {
            $(".tab-wrap").each(function(t, e) {
                $(this).parents().hasClass("en") ? $(e).find(".tab-list > li > a.on, button.on").attr({
                    title: "current tab",
                    "aria-selected": "true",
                    role: "tab"
                }) : $(e).find(".tab-list > li > a.on, button.on").attr({
                    title: "현재 탭",
                    "aria-selected": "true",
                    role: "tab"
                }),
                $(e).find(".tab-content").find("> div").eq(0).attr("aria-hidden", "false").siblings("div").attr("aria-hidden", "true"),
                $(window).on("resize", function() {
                    i.tab.tabActiveFocus()
                })
            }),
            $(".tab-ctrl .tab-list > li > *").on("focusin click", function() {
                var t = $(this).closest("li").index();
                ($(this).parents().hasClass("en") ? $(this).addClass("on").attr({
                    title: "current tab",
                    "aria-selected": "true"
                }) : $(this).addClass("on").attr({
                    title: "현재 탭",
                    "aria-selected": "true"
                })).closest("li").siblings("li").find("a, button").removeClass("on").attr({
                    title: "",
                    "aria-selected": "false"
                }),
                $(this).closest(".tab-list").siblings(".tab-content").children("div").attr("aria-hidden", "false").eq(t).show().siblings("div").hide().attr("aria-hidden", "true"),
                $(window).on("resize", function() {
                    tabActiveFocus()
                })
            })
        },
        tabActiveFocus() {
            const r = $(".tab-list");
            r.each( (t, e) => {
                var i = $(e).width()
                  , o = $(e).find("> li");
                let n = 0, s;
                o.each( (t, e) => {
                    var i = $(e).outerWidth();
                    -1 != $(e).find(".on").parent().index() && (s = $(e).find(".on").parent().index()),
                    n += i
                }
                ),
                i <= n && (2 <= s && $(e).scrollLeft(100 * s),
                r.addClass("scroll-width"))
            }
            )
        }
    },
    i.topScroll = {
        init() {
            this.topScroll()
        },
        topScroll() {
            let e = 0;
            var t = $("#footer").outerHeight() - 160;
            $(document).height(),
            $(window).height();
            $(window).on("scroll", function() {
                var t = $(this).scrollTop();
                t > e ? $("body").removeClass("scroll-up").addClass("scroll-down") : ($("body").removeClass("scroll-down").addClass("scroll-up"),
                $("body").addClass("scroll-middle")),
                0 === t ? $("body").addClass("current-top") : $("body").removeClass("current-top"),
                e = t <= 0 ? 0 : t
            }),
            $(".btn-go-top").on("click", function() {
                $("html, body").animate({
                    scrollTop: 0
                }, 500)
            })
        }
    },
    i.familySite = {
        init() {
            this.siteToggle()
        },
        siteToggle() {
            $(".btn-site-select").on("click", function() {
                $(this).toggleClass("on"),
                !0 === $(this).hasClass("on") ? $(this).siblings(".site-list").css("display", "block").attr({
                    tabindex: 0,
                    "aria-hidden": "false"
                }) : $(this).siblings(".site-list").css("display", "none").attr({
                    tabindex: "",
                    "aria-hidden": "true"
                })
            })
        }
    },
    i.gnb = {
        init() {
            this.gnbActive(),
            this.cdToggle(),
            this.moBtnToggle(),
            this.searchToggle()
        },
        gnbActive() {
            const t = $("#header .container")
              , i = $(".gnb-list > li > a");
            i.each(function(t, e) {
                $(this).on("mouseover", () => {
                    i.removeClass("on"),
                    $(this).addClass("on"),
                    $(".search-wrap .btn-search").removeClass("on")
                }
                )
            }),
            t.on("mouseleave", function() {
                i.removeClass("on")
            })
        },
        cdToggle() {
            $(".catalogue-wrap .btn-toggle").on("click", () => {
                $(".right-content").toggleClass("on")
            }
            )
        },
        moBtnToggle() {
            $("#header .container .btn-menu").on("click", function() {
                $(this).toggleClass("on")
            })
        },
        searchToggle() {
            $(".search-wrap .btn-search").on("click", function() {
                $(this).toggleClass("on"),
                $(".gnb-list > li > a").removeClass("on")
            })
        }
    },
    i.accordion = {
        init() {
            this.accordion()
        },
        accordion() {
            $(".accordion-item").each(function() {
                var t = $(this).find(".btn-toggle")
                  , e = $(this).find(".accordion-content");
                t.attr("aria-expanded", "false"),
                e.attr("aria-hidden", "true"),
                t.on("click", function() {
                    var t = $(this).parent();
                    t.find(".btn-toggle").hasClass("on") ? (t.find(".btn-toggle").removeClass("on").attr("aria-expanded", "false"),
                    t.find(".accordion-content").slideUp(150).attr("aria-hidden", "true")) : ($(this).attr("aria-expanded", "true"),
                    t.find(".btn-toggle").addClass("on"),
                    t.find(".accordion-content").slideDown(150).attr("aria-hidden", "false").css("visibility", "visible"),
                    t.siblings().find(".btn-toggle").removeClass("on"),
                    t.siblings().find(".accordion-content").slideUp(150).attr("aria-hidden", "false").css("visibility", "visible"))
                })
            })
        }
    },
    i.locationAccorion = {
        init() {
            this.locationAtive();
            var t = document.querySelectorAll(".location-item")[0]
              , e = t.querySelector(".btn-toggle")
              , t = t.querySelector(".location-content");
            e.classList.add("active"),
            t.classList.add("on")
        },
        locationAtive() {
            let o = document.querySelectorAll(".location-item");
            o.forEach(function(i) {
                let t = i.querySelector(".btn-toggle")
                  , e = i.querySelector(".location-content");
                t.addEventListener("click", function() {
                    o.forEach(function(t) {
                        var e = t.querySelector(".btn-toggle");
                        t !== i && (e.classList.remove("active"),
                        t.querySelector(".location-content").classList.remove("on"))
                    }),
                    t.classList.toggle("active"),
                    t.classList.contains("active") ? e.classList.add("on") : e.classList.remove("on")
                })
            })
        }
    },
    i.btnFix = {
        init() {
            this.btnFix()
        },
        btnFix() {
            document.addEventListener("scroll", function(e, i) {
                let o = 0;
                return function() {
                    var t = (new Date).getTime();
                    t - o >= i && (e(),
                    o = t)
                }
            }(function() {
                var t = $(window)
                  , e = $("#footer").outerHeight()
                  , i = $(".btn-fixed")
                  , o = t.scrollTop();
                $(document).height() - t.height() - e < o ? i.removeClass("on") : i.addClass("on")
            }, 800))
        }
    };
    var e = {
        init() {
            var t = $(".table-wrap").offset().top
              , e = $("#header").outerHeight();
            $(window).innerWidth(),
            $("html, body").animate({
                scrollTop: t - e - 60
            }, 200)
        }
    }
      , o = {
        init() {
            $("[data-pop]").on("click", t => this.open(t)),
            $("body").on("click", ".popup-close", t => this.close(t))
        },
        open(t) {
            let e;
            e = "object" == typeof t ? "#" + $(t.currentTarget).attr("data-pop") : "#" + t,
            this.obj = $(t.currentTarget),
            $(e).attr({
                tabindex: 0,
                "aria-hidden": "false"
            }).addClass("show").focus(),
            document.body.classList.add("no-scroll")
        },
        close(t) {
            ("object" == typeof t ? $(t.currentTarget).closest(".layer-popup-wrap") : $("#" + t)).attr({
                tabindex: "",
                "aria-hidden": "true"
            }).removeClass("show"),
            this.obj.focus(),
            document.body.classList.remove("no-scroll")
        }
    };
    return i.init(),
    {
        uiCommon: i,
        memberScrTop: e,
        layerPopup: o
    }
}(window.uiCommon || {}, $(window))
  , subFunc = (AOS.init(),
$(".js-range-slider").ionRangeSlider(),
function(t) {
    t.init = () => {
        0 < $(".reference.technical").length && t.techMotion.init(),
        0 < $(".reference.construction").length && t.imgThumbSlide.init(),
        0 < $(".mo-btn-tabtoggle").length && t.moTabToggle.init(),
        0 < $(".product.glass").length && t.productSlide.init(),
        0 < $(".product.glass").length && t.productMotion.init(),
        0 < $(".lxglas.enterprise").length && t.productSlide.init(),
        0 < $(".lxglas.rnd").length && t.productSlide.init(),
        0 < $(".lxglas.rnd").length && t.rndHisSlide.init(),
        0 < $(".lxglas.rnd").length && t.rndHisMotion.init(),
        0 < $(".btn-toggle-default").length && t.defaultToggle.init(),
        0 < $(".recruit.candidate").length && t.gridMotion.init(),
        0 < $(".lxglas.history").length && t.historyMotion.init(),
        0 < $(".member-list-wrap").length && t.mapFixed.init(),
        0 < $("#main > #subVisual").length && t.aosContainer.init(),
        0 < $(".product-popup-slide").length && t.productPopSlide.init(),
        0 < $(".title-main-wrap").length && t.titleFirstBlock.init()
    }
    ,
    t.techMotion = {
        init() {
            this.scrollMotion()
        },
        scrollMotion() {
            gsap.registerPlugin(ScrollTrigger),
            ScrollTrigger.matchMedia({
                "(min-width: 768px)": function() {
                    gsap.to(".group-title.type-01", {
                        scrollTrigger: {
                            trigger: ".group-title.type-01",
                            start: "top 80px",
                            endTrigger: ".group-conts.type-01",
                            end: "bottom 250px",
                            pin: !0,
                            pinSpacing: !1
                        }
                    })
                }
            }),
            $(window).on("resize", function() {
                ScrollTrigger.update()
            })
        }
    },
    t.titleFirstBlock = {
        init() {
            var t = document.querySelector(".title-main-wrap");
            t && t.classList.add("type-block")
        }
    },
    t.productMotion = {
        init() {
            this.productMotion()
        },
        productMotion() {
            gsap.registerPlugin(ScrollTrigger),
            ScrollTrigger.matchMedia({
                "(min-width: 767px)": function() {
                    gsap.to(".product-view", {
                        scrollTrigger: {
                            trigger: ".product-view",
                            start: "top 80px",
                            endTrigger: ".product-desc",
                            end: "bottom 600px",
                            pin: !0,
                            pinSpacing: !1
                        }
                    })
                }
            }),
            $(window).on("resize", function() {
                ScrollTrigger.update()
            })
        }
    },
    t.moTabToggle = {
        init() {
            this.tabToggle()
        },
        tabToggle() {
            $(".mo-btn-tabtoggle").each(function(t, e) {
                $(e).on("click", function() {
                    $(this).toggleClass("on");
                    var t = $(this).siblings(".mo-toggle-tap");
                    $(this).hasClass("on") ? t.css("height", "auto") : t.css("height", "2.625rem")
                })
            })
        }
    },
    t.imgThumbSlide = {
        init() {
            this.thumbSlide = new Swiper(".thumb-swiper",{
                loop: !1,
                spaceBetween: 21,
                slidesPerView: 5,
                freeMode: !0,
                watchSlidesProgress: !0
            }),
            this.imgSlide = new Swiper(".img-swiper",{
                loop: !1,
                spaceBetween: 10,
                pagination: {
                    el: ".swiper-pagination",
                    clickable: !0
                },
                navigation: {
                    nextEl: ".swiper-button-next",
                    prevEl: ".swiper-button-prev"
                },
                thumbs: {
                    swiper: this.thumbSlide
                }
            }),
            this.popupSlide = new Swiper(".img-swiper-popup",{
                loop: !1,
                spaceBetween: 10,
                pagination: {
                    el: ".slide-popup .swiper-pagination",
                    clickable: !0
                },
                navigation: {
                    nextEl: ".swiper-button-next",
                    prevEl: ".swiper-button-prev"
                }
            }),
            $(".open-slide").on("click", t => this.openPopup(t)),
            $("body").on("click", ".popup-close", t => this.closePopup(t))
        },
        openPopup(t) {
            var t = $(t.currentTarget)
              , e = "#" + t.attr("data-pop");
            this.obj && $(this.obj).attr({
                tabindex: ""
            }).removeClass("show"),
            this.obj = t,
            $(e).attr({
                tabindex: 0
            }).addClass("show").focus(),
            document.body.classList.add("no-scroll"),
            this.popupSlide && (t = this.popupSlide ? this.imgSlide.activeIndex : 0,
            "function" == typeof this.popupSlide.slideTo) && this.popupSlide.slideTo(t)
        },
        closePopup(t) {
            $(t.currentTarget).closest(".layer-popup-wrap").attr({
                tabindex: ""
            }).removeClass("show"),
            this.obj && this.obj.focus(),
            document.body.classList.remove("no-scroll")
        }
    };
    let e;
    return t.productPopSlide = {
        init() {
            e = new Swiper(".product-popup-slide",{
                loop: !1,
                slidesPerView: 1,
                pagination: {
                    el: ".slide-popup .swiper-pagination",
                    clickable: !0
                },
                navigation: {
                    nextEl: ".swiper-button-next",
                    prevEl: ".swiper-button-prev"
                }
            }),
            document.querySelectorAll(".popup-page-init").forEach(t => {
                t.addEventListener("click", function() {
                    e.slideTo(0, 0)
                })
            }
            )
        },
        update() {
            e.update()
        }
    },
    t.rndHisSlide = {
        init() {
            let i = null;
            function t() {
                if (window.matchMedia("(max-width: 767px)").matches) {
                    if (null === i) {
                        i = new Swiper(".history-swiper",{
                            slidesPerView: 1,
                            touch: !0,
                            loop: !1,
                            autoHeight: !0,
                            on: {
                                slideChange: function() {
                                    t()
                                }
                            }
                        });
                        const e = document.querySelectorAll(".history-pagination-button");
                        function t() {
                            e.forEach(t => {
                                t.classList.remove("active")
                            }
                            );
                            var t = document.querySelector(`.history-pagination-button[data-slide="${i.realIndex + 1}"]`);
                            t && t.classList.add("active")
                        }
                        e.forEach(t => {
                            t.addEventListener("click", function() {
                                var t = this.getAttribute("data-slide") - 1;
                                i.slideTo(t)
                            })
                        }
                        ),
                        t(),
                        i.update()
                    }
                } else
                    null !== i && null !== i && (i.destroy(),
                    i = null)
            }
            t(),
            window.addEventListener("resize", function() {
                t()
            })
        }
    },
    t.rndHisMotion = {
        init() {
            this.initScrollAnimations(),
            this.rndHisEvent()
        },
        initScrollAnimations() {
            gsap.registerPlugin(ScrollTrigger),
            ScrollTrigger.matchMedia({
                "(min-width: 767px)": function() {
                    ScrollTrigger.create({
                        trigger: ".history-cont-wrap",
                        start: "top 200px",
                        end: "bottom top",
                        pin: ".history-btn-list",
                        pinSpacing: !1
                    })
                },
                "(max-width: 767px)": function() {
                    ScrollTrigger.create({
                        trigger: ".history-cont-wrap",
                        start: "top 80px",
                        end: "bottom top",
                        pin: ".history-pagination",
                        pinSpacing: !1
                    })
                }
            }),
            $(window).on("resize", function() {
                ScrollTrigger.update()
            })
        },
        rndHisEvent() {
            const n = $(".year-item")
              , i = n.length;
            let s = [];
            function t() {
                var e = [];
                for (let t = 0; t < i; t++)
                    e[t] = n.eq(t).offset().top;
                return e
            }
            function e() {
                $(window).scroll(function() {
                    let i = $(".history-btn-list").offset().top + 40
                      , o = $(".history-btn-list > li");
                    n.each(t => {
                        var e = s[t];
                        i >= e && (o.removeClass("on"),
                        o.eq(t).addClass("on"))
                    }
                    )
                })
            }
            function o() {
                const t = $(".year-item");
                $(".history-btn-list > li").find("button").on("click", function() {
                    gsap.to(window, {
                        duration: .5,
                        scrollTo: {
                            y: t.eq($(this).parents().index()).offset().top - 130
                        }
                    })
                })
            }
            s = t(),
            e(),
            o(),
            $(window).on("resize", function() {
                ScrollTrigger.update(),
                s = t(),
                e(),
                o()
            })
        }
    },
    t.productSlide = {
        init() {
            let i = [];
            const o = window.matchMedia("(max-width: 767px)");
            function t(e) {
                i.forEach(t => t.destroy(!1, !0)),
                i = [],
                document.querySelectorAll(".product-swiper").forEach(t => {
                    t = new Swiper(t,{
                        slidesPerView: 1,
                        loop: !0,
                        autoplay: {
                            delay: 6e3,
                            disableOnInteraction: !1
                        },
                        pagination: {
                            el: t.querySelector(".swiper-pagination"),
                            type: e,
                            clickable: !0,
                            renderCustom: "custom" === e ? function(t, e, i) {
                                return `<span class="swiper-pagination-current">${("0" + e).slice(-2)}</span>/
                                    <span class="swiper-pagination-total">${("0" + i).slice(-2)}</span>`
                            }
                            : null
                        },
                        navigation: {
                            nextEl: t.querySelector(".swiper-button-next"),
                            prevEl: t.querySelector(".swiper-button-prev")
                        },
                        on: {
                            init: () => {
                                n()
                            }
                            ,
                            resize: () => {
                                n()
                            }
                        }
                    });
                    i.push(t)
                }
                )
            }
            function n() {
                const e = document.querySelector(".swiper-slide > .img")
                  , i = document.querySelector(".product-btn-inner");
                e && i && setTimeout( () => {
                    var t = e.offsetHeight;
                    o.matches ? i.style.top = t + 20 + "px" : i.style.top = t - 80 + "px"
                }
                , 300)
            }
            function e() {
                o.matches ? t("bullets") : t("custom")
            }
            window.addEventListener("resize", e),
            document.addEventListener("DOMContentLoaded", function() {
                e(),
                n()
            })
        }
    },
    t.defaultToggle = {
        init() {
            this.defaultToggle()
        },
        defaultToggle() {
            $(".btn-toggle-default").each(function(t, e) {
                $(e).on("click", function() {
                    $(this).toggleClass("on");
                    var t = $(this).parents().siblings(".toggle-content");
                    $(this).hasClass("on") ? t.addClass("active") : t.removeClass("active"),
                    t.hasClass("active") ? t.attr("aria-hidden", "false") : t.attr("aria-hidden", "true")
                })
            })
        }
    },
    t.gridMotion = {
        init() {
            0 < $(".grid-motion-wrap").length && this.gridMotionActive(),
            0 < $(".grid-benefits-wrap").length && this.welfareMotionActive()
        },
        gridMotionActive() {
            gsap.registerPlugin(ScrollTrigger),
            ScrollTrigger.matchMedia({
                "(min-width: 768px)": function() {
                    gsap.to(".grid-motion-wrap", {
                        scrollTrigger: {
                            trigger: ".group-title",
                            pin: ".group-title",
                            start: "top 50%",
                            endTrigger: ".group-conts .conts-item.item-03",
                            end: "top 60%",
                            pinSpacing: !1
                        }
                    })
                }
            }),
            $(window).on("resize", function() {
                ScrollTrigger.update()
            })
        },
        welfareMotionActive() {
            gsap.registerPlugin(ScrollTrigger),
            ScrollTrigger.matchMedia({
                "(min-width: 768px)": function() {
                    gsap.to(".grid-benefits-wrap", {
                        scrollTrigger: {
                            trigger: ".benefits-title",
                            pin: ".benefits-title",
                            start: "top 50%",
                            endTrigger: ".benefits-conts .benefits-item.item-12",
                            end: "top 50%",
                            pinSpacing: !1
                        }
                    })
                }
            }),
            $(window).on("resize", function() {
                ScrollTrigger.update()
            })
        }
    },
    t.historyMotion = {
        init() {
            let n = 0;
            gsap.registerPlugin(ScrollTrigger);
            const t = document.querySelector(".history-conts").querySelector("ul").clientHeight - 120;
            gsap.to(".history-wrap", {
                scrollTrigger: {
                    trigger: ".history-gnb",
                    pin: ".history-gnb",
                    start: "top 50%",
                    end: () => `+=${t}px`,
                    pinSpacing: !1,
                    onEnter: () => {
                        $(".history-tab").addClass("show")
                    }
                    ,
                    onEnterBack: () => {
                        $(".history-tab").addClass("show")
                    }
                    ,
                    onLeaveBack: () => {
                        $(".history-tab").removeClass("show")
                    }
                    ,
                    onLeave: () => {
                        $(".history-tab").removeClass("show")
                    }
                }
            }),
            gsap.to(".progress-bar span", {
                scrollTrigger: {
                    trigger: ".history-gnb",
                    start: "top 50%",
                    end: () => `+=${t}px`,
                    scrub: !0
                },
                height: "100%",
                ease: "none"
            });
            var e = $(".history-conts ul > li.year-box");
            const i = $(e).outerHeight() + parseInt($(e).css("margin-bottom"), 10);
            function o() {
                var t = window.innerHeight
                  , e = $(window).scrollTop()
                  , i = t / 2
                  , o = ($(".year19").offset().top,
                $(".last-year").offset().top,
                $(".year19").offset().top - 120 <= $(".history-gnb .current-year").offset().top ? $(".history-gnb .current-year").text("19") : $(".history-gnb .current-year").text("20"),
                []);
                for (let t = 0; t <= 4; t++)
                    o.push($(".tab" + t).offset().top - 120);
                for (let t = 0; t < o.length; t++)
                    if (e + i >= o[t] && (t === o.length - 1 || e + i < o[t + 1])) {
                        n !== t && (n = t,
                        s());
                        break
                    }
            }
            function s() {
                $(".history-gnb ul.caption-current li").each(function(t) {
                    var e = t < n || t === n ? 0 : 40
                      , t = !(t < n) && t === n ? 1 : 0;
                    gsap.to($(this), .3, {
                        y: e,
                        autoAlpha: t,
                        ease: Expo.easeOut
                    })
                }),
                $(".history-gnb ul.caption-next li").each(function(t) {
                    let e;
                    e = 0 === t && t === n ? 0 : t < n ? -70 * t - 350 : 1;
                    t = t === n ? 0 : .3;
                    gsap.to($(this), .3, {
                        y: e,
                        autoAlpha: t,
                        ease: Expo.easeOut
                    })
                }),
                $(".history-tab ul li").each(function(t) {
                    t === n ? $(this).find("a").addClass("active") : $(this).find("a").removeClass("active")
                })
            }
            function r(t) {
                t.preventDefault();
                t = ".tab" + (n = $(this).index()),
                t = $(".history-conts").find(t).offset().top - window.innerHeight / 2;
                $("html, body").animate({
                    scrollTop: t
                }, 400)
            }
            ScrollTrigger.matchMedia({
                "(min-width: 1200px)": function() {
                    ScrollTrigger.create({
                        trigger: ".history-conts",
                        pin: !0,
                        start: "top 50%",
                        end: () => `+=${t}px`,
                        onUpdate: t => {
                            t = t.progress,
                            t = Math.round(27 * t);
                            gsap.to(".history-conts ul > li.year-box", {
                                y: -i * t,
                                duration: .1,
                                ease: "power1.out"
                            })
                        }
                    })
                }
            }),
            $(window).on("scroll", o),
            $(window).on("resize", o),
            $(".history-gnb ul li").on("click", r),
            $(".history-tab ul li").on("click", r),
            o(),
            s()
        }
    },
    t.mapFixed = {
        init() {
            this.handleSticky()
        },
        handleSticky() {
            gsap.registerPlugin(ScrollTrigger),
            ScrollTrigger.matchMedia({
                "(max-width: 767px)": function() {
                    var t = document.querySelector(".member-list-wrap").clientHeight;
                    document.querySelector(".card-box > li").clientHeight;
                    let e = $(".map-box").outerHeight()
                      , i = $(".util-box").outerHeight()
                      , o = t - e;
                    gsap.to(".member-list-wrap", {
                        scrollTrigger: {
                            trigger: ".member-list-wrap",
                            pin: ".map-box",
                            start: "top 80",
                            end: () => `+=${o}px`,
                            pinSpacing: !1,
                            onEnter: () => {
                                $(".member-list-box").css({
                                    marginTop: e + i + "px"
                                })
                            }
                            ,
                            onLeaveBack: () => {
                                $(".member-list-box").css({
                                    marginTop: "0px"
                                })
                            }
                        }
                    })
                }
            })
        }
    },
    t.aosContainer = {
        init() {
            this.aosMotion(),
            0 < $(".password-wrap").length && this.passwordSvg()
        },
        aosMotion() {
            let t = $("#main > .container");
            $(window).on("load", () => {
                setTimeout( () => {
                    $(t).addClass("on"),
                    0 < $(".password-wrap").length && this.passwordSvg()
                }
                , 1200)
            }
            )
        },
        passwordSvg() {
            const t = document.querySelectorAll(".path1, .path2, .path3");
            t.forEach(t => {
                t.style.strokeDasharray = t.getTotalLength(),
                t.style.strokeDashoffset = t.getTotalLength()
            }
            ),
            t.forEach( (t, e) => {
                setTimeout( () => {
                    t.style.transition = "stroke-dashoffset 1s ease-in-out",
                    t.style.strokeDashoffset = "0"
                }
                , 500 * e)
            }
            ),
            t.forEach( (t, e) => {
                t.style.transition = "none",
                t.style.strokeDashoffset = t.getTotalLength()
            }
            )
        }
    },
    t.init(),
    {
        subFunc: t
    }
}(window.subFunc || {}, $(window)));
